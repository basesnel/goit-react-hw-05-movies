{"version":3,"file":"static/js/779.8a4d58b3.chunk.js","mappings":"uQAAA,IAAMA,EAAS,mCAEFC,EAAc,SAAAC,GACzB,OAAOC,MAAM,4DAAD,OACkDH,EADlD,iBACiEE,IAC3EE,MAAK,SAAAC,GACL,OAAOA,EAAKC,MACb,GACF,EAEYC,EAAiB,SAAAC,GAC5B,OAAOL,MAAM,qDAAD,OAC2CH,EAD3C,kBAC2DQ,IACrEJ,MAAK,SAAAC,GACL,OAAOA,EAAKC,MACb,GACF,EAEYG,EAAkB,SAAAC,GAC7B,OAAOP,MAAM,sCAAD,OAC4BO,EAD5B,oBAC0CV,IACpDI,MAAK,SAAAC,GACL,OAAOA,EAAKC,MACb,GACF,EAEYK,EAAkB,SAAAD,GAC7B,OAAOP,MAAM,sCAAD,OAC4BO,EAD5B,4BACkDV,IAC5DI,MAAK,SAAAC,GACL,OAAOA,EAAKC,MACb,GACF,EAEYM,EAAkB,SAAAF,GAC7B,OAAOP,MAAM,sCAAD,OAC4BO,EAD5B,4BACkDV,IAC5DI,MAAK,SAAAC,GACL,OAAOA,EAAKC,MACb,GACF,C,8ECtCYO,E,OAAcC,GAAAA,IAAH,uM,SCET,SAASC,EAAT,GAAkC,IAAhBC,EAAe,EAAfA,YAC/B,OACE,UAACH,EAAD,YACE,SAAC,KAAD,CACEI,YAAY,OACZC,YAAY,IACZC,kBAAkB,OAClBC,MAAM,KACNC,SAAS,KAEX,uBAAIL,MAGT,C,qICfYM,EAAOR,EAAAA,GAAAA,GAAH,8DAKJS,EAAOT,EAAAA,GAAAA,GAAH,gDAIJU,EAAQV,EAAAA,GAAAA,GAAH,2CAILW,EAAOX,EAAAA,GAAAA,EAAH,2C,kBCgDjB,EAzDgB,WACd,IAAQY,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAwCE,EAAAA,EAAAA,UAAS,IAAjD,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOG,EAAP,KAAgBC,EAAhB,KA6BA,OA3BAC,EAAAA,EAAAA,YAAU,WACRD,GAAW,GAEXE,YAAW,YACTtB,EAAAA,EAAAA,IAAgBc,GACbtB,MAAK,SAAA+B,GACJ,OAAOA,EAAQC,OAChB,IACAhC,MAAK,SAAA+B,GAUJ,OAT0BA,EAAQE,KAAI,YAA8B,IAA3B3B,EAA0B,EAA1BA,GAAI4B,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC7CC,EAAS,CAAC,EAMhB,OAJAA,EAAO9B,GAAKA,EACZ8B,EAAOF,OAASA,EAChBE,EAAOD,QAAUA,EAEVC,CACR,GAEF,IACApC,MAAK,SAAAqC,GACJX,EAAgBW,EACjB,IACAC,QAAQV,GAAW,GACvB,GAAE,IACJ,GAAE,CAACN,KAGF,8BACGK,GACC,SAAChB,EAAA,EAAD,CAAQC,YAAY,kCAClBa,EAAac,QACf,iCACE,qDAA6BjB,MAC7B,SAACJ,EAAD,UACGO,EAAaQ,KAAI,SAAAG,GAChB,OACE,UAACjB,EAAD,YACE,SAACC,EAAD,UAAQgB,EAAOF,UACf,SAACb,EAAD,UAAOe,EAAOD,YAFLC,EAAO9B,GAKrB,UAIL,sDAIP,C","sources":["api/api-service.js","components/Loader/Loader.styled.js","components/Loader/Loader.jsx","components/Reviews/Reviews.styled.js","components/Reviews/Reviews.jsx"],"sourcesContent":["const apiKey = '5a20241834eb9a6674dc92f9938aafbf';\n\nexport const getTrending = page => {\n  return fetch(\n    `https://api.themoviedb.org/3/trending/movie/week?api_key=${apiKey}&page=${page}`\n  ).then(data => {\n    return data.json();\n  });\n};\n\nexport const getSearchMovie = query => {\n  return fetch(\n    `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${query}`\n  ).then(data => {\n    return data.json();\n  });\n};\n\nexport const getMovieDetails = id => {\n  return fetch(\n    `https://api.themoviedb.org/3/movie/${id}?api_key=${apiKey}`\n  ).then(data => {\n    return data.json();\n  });\n};\n\nexport const getMovieCredits = id => {\n  return fetch(\n    `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${apiKey}`\n  ).then(data => {\n    return data.json();\n  });\n};\n\nexport const getMovieReviews = id => {\n  return fetch(\n    `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${apiKey}`\n  ).then(data => {\n    return data.json();\n  });\n};\n","import styled from 'styled-components';\n\nexport const LoaderBlock = styled.div`\n  margin: 16px auto 0;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  gap: 10px;\n  justify-content: center;\n  color: #808080;\n  font-weight: 700;\n`;\n","import { RotatingLines } from 'react-loader-spinner';\nimport PropTypes from 'prop-types';\nimport { LoaderBlock } from './Loader.styled';\n\nexport default function Loader({ searchQuery }) {\n  return (\n    <LoaderBlock>\n      <RotatingLines\n        strokeColor=\"grey\"\n        strokeWidth=\"5\"\n        animationDuration=\"0.75\"\n        width=\"96\"\n        visible={true}\n      />\n      <p>{searchQuery}</p>\n    </LoaderBlock>\n  );\n}\n\nLoader.propTypes = {\n  searchQuery: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  padding: 8px;\n  list-style: none;\n`;\n\nexport const Item = styled.li`\n  padding-bottom: 8px;\n`;\n\nexport const Title = styled.h3`\n  color: #202020;\n`;\n\nexport const Text = styled.p`\n  color: #808080;\n`;\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { getMovieReviews } from 'api/api-service';\nimport { List, Item, Title, Text } from './Reviews.styled';\nimport Loader from 'components/Loader/Loader';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [movieReviews, setMovieReviews] = useState([]);\n  const [pending, setPending] = useState(false);\n\n  useEffect(() => {\n    setPending(true);\n\n    setTimeout(() => {\n      getMovieReviews(movieId)\n        .then(reviews => {\n          return reviews.results;\n        })\n        .then(reviews => {\n          const reviewsCollection = reviews.map(({ id, author, content }) => {\n            const review = {};\n\n            review.id = id;\n            review.author = author;\n            review.content = content;\n\n            return review;\n          });\n          return reviewsCollection;\n        })\n        .then(reviewsCollection => {\n          setMovieReviews(reviewsCollection);\n        })\n        .finally(setPending(false));\n    }, 500);\n  }, [movieId]);\n\n  return (\n    <>\n      {pending ? (\n        <Loader searchQuery=\"Search for trending movies...\" />\n      ) : movieReviews.length ? (\n        <>\n          <h2>Reviews detail content: {movieId}</h2>\n          <List>\n            {movieReviews.map(review => {\n              return (\n                <Item key={review.id}>\n                  <Title>{review.author}</Title>\n                  <Text>{review.content}</Text>\n                </Item>\n              );\n            })}\n          </List>\n        </>\n      ) : (\n        <p>No reviews for the movie.</p>\n      )}\n    </>\n  );\n};\n\nexport default Reviews;\n"],"names":["apiKey","getTrending","page","fetch","then","data","json","getSearchMovie","query","getMovieDetails","id","getMovieCredits","getMovieReviews","LoaderBlock","styled","Loader","searchQuery","strokeColor","strokeWidth","animationDuration","width","visible","List","Item","Title","Text","movieId","useParams","useState","movieReviews","setMovieReviews","pending","setPending","useEffect","setTimeout","reviews","results","map","author","content","review","reviewsCollection","finally","length"],"sourceRoot":""}