{"version":3,"file":"static/js/387.8465c725.chunk.js","mappings":"uQAAA,IAAMA,EAAS,mCAEFC,EAAc,SAAAC,GACzB,OAAOC,MAAM,4DAAD,OACkDH,EADlD,iBACiEE,IAC3EE,MAAK,SAAAC,GACL,OAAOA,EAAKC,MACb,GACF,EAEYC,EAAiB,SAAAC,GAC5B,OAAOL,MAAM,qDAAD,OAC2CH,EAD3C,kBAC2DQ,IACrEJ,MAAK,SAAAC,GACL,OAAOA,EAAKC,MACb,GACF,EAEYG,EAAkB,SAAAC,GAC7B,OAAOP,MAAM,sCAAD,OAC4BO,EAD5B,oBAC0CV,IACpDI,MAAK,SAAAC,GACL,OAAOA,EAAKC,MACb,GACF,EAEYK,EAAkB,SAAAD,GAC7B,OAAOP,MAAM,sCAAD,OAC4BO,EAD5B,4BACkDV,IAC5DI,MAAK,SAAAC,GACL,OAAOA,EAAKC,MACb,GACF,EAEYM,EAAkB,SAAAF,GAC7B,OAAOP,MAAM,sCAAD,OAC4BO,EAD5B,4BACkDV,IAC5DI,MAAK,SAAAC,GACL,OAAOA,EAAKC,MACb,GACF,C,uICtCYO,EAAOC,EAAAA,GAAAA,GAAH,8IASJC,EAAOD,EAAAA,GAAAA,GAAH,gDAIJE,EAAYF,EAAAA,GAAAA,EAAH,4EAMTG,EAASH,EAAAA,GAAAA,EAAH,4EAMNI,EAAQJ,EAAAA,GAAAA,IAAH,sN,SCuClB,EA7Da,WACX,IAAQK,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAkCE,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KA0BA,OAxBAC,EAAAA,EAAAA,YAAU,YACRb,EAAAA,EAAAA,IAAgBQ,GACbf,MAAK,SAAAqB,GACJ,OAAOA,EAAOC,IACf,IACAtB,MAAK,SAAAsB,GAaJ,OAZyBA,EAAKC,KAC5B,YAA4C,IAAzCjB,EAAwC,EAAxCA,GAAIkB,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACnBC,EAAQ,CAAC,EAOf,OALAA,EAAMrB,GAAKA,EACXqB,EAAMH,aAAeA,EACrBG,EAAMF,KAAOA,EACbE,EAAMD,UAAYA,EAEXC,CACR,GAGJ,IACA3B,MAAK,SAAA4B,GACJT,EAAaS,EACd,GACJ,GAAE,CAACb,KAEF,8BACGG,EAAUW,QACT,iCACE,kDAA0Bd,MAC1B,SAACN,EAAD,UACGS,EAAUK,KAAI,SAAAI,GACb,OACE,UAAChB,EAAD,WACGgB,EAAMH,cACL,gBACEM,IAAG,yCAAoCH,EAAMH,cAC7CO,IAAKJ,EAAMF,QAGb,SAACX,EAAD,uBAEF,SAACF,EAAD,uBACA,SAACC,EAAD,UAASc,EAAMF,QACf,SAACb,EAAD,0BACA,SAACC,EAAD,UAASc,EAAMD,cAZNC,EAAMrB,GAepB,UAIL,wDAIP,C","sources":["api/api-service.js","components/Cast/Cast.styled.js","components/Cast/Cast.jsx"],"sourcesContent":["const apiKey = '5a20241834eb9a6674dc92f9938aafbf';\n\nexport const getTrending = page => {\n  return fetch(\n    `https://api.themoviedb.org/3/trending/movie/week?api_key=${apiKey}&page=${page}`\n  ).then(data => {\n    return data.json();\n  });\n};\n\nexport const getSearchMovie = query => {\n  return fetch(\n    `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${query}`\n  ).then(data => {\n    return data.json();\n  });\n};\n\nexport const getMovieDetails = id => {\n  return fetch(\n    `https://api.themoviedb.org/3/movie/${id}?api_key=${apiKey}`\n  ).then(data => {\n    return data.json();\n  });\n};\n\nexport const getMovieCredits = id => {\n  return fetch(\n    `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${apiKey}`\n  ).then(data => {\n    return data.json();\n  });\n};\n\nexport const getMovieReviews = id => {\n  return fetch(\n    `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${apiKey}`\n  ).then(data => {\n    return data.json();\n  });\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: flex;\n  gap: 10px;\n  flex-wrap: wrap;\n  justify-content: center;\n  padding: 8px;\n  list-style: none;\n`;\n\nexport const Item = styled.li`\n  padding-bottom: 8px;\n`;\n\nexport const Attribute = styled.p`\n  margin: 0;\n  padding: 4px 0;\n  color: #808080;\n`;\n\nexport const Person = styled.p`\n  margin: 0;\n  padding: 4px 0;\n  color: #202020;\n`;\n\nexport const Blank = styled.div`\n  width: 200px;\n  height: 300px;\n  background: #ddd;\n  border: 1px solid #888;\n  color: #888;\n  font-weight: 500;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { getMovieCredits } from 'api/api-service';\nimport { List, Item, Person, Attribute, Blank } from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [movieCast, setMovieCast] = useState([]);\n\n  useEffect(() => {\n    getMovieCredits(movieId)\n      .then(credit => {\n        return credit.cast;\n      })\n      .then(cast => {\n        const actorsCollection = cast.map(\n          ({ id, profile_path, name, character }) => {\n            const actor = {};\n\n            actor.id = id;\n            actor.profile_path = profile_path;\n            actor.name = name;\n            actor.character = character;\n\n            return actor;\n          }\n        );\n        return actorsCollection;\n      })\n      .then(actorsCollection => {\n        setMovieCast(actorsCollection);\n      });\n  }, [movieId]);\n  return (\n    <>\n      {movieCast.length ? (\n        <>\n          <h2>Cast detail content: {movieId}</h2>\n          <List>\n            {movieCast.map(actor => {\n              return (\n                <Item key={actor.id}>\n                  {actor.profile_path ? (\n                    <img\n                      src={`https://image.tmdb.org/t/p/w200${actor.profile_path}`}\n                      alt={actor.name}\n                    />\n                  ) : (\n                    <Blank>No foto</Blank>\n                  )}\n                  <Attribute>Person:</Attribute>\n                  <Person>{actor.name}</Person>\n                  <Attribute>Character:</Attribute>\n                  <Person>{actor.character}</Person>\n                </Item>\n              );\n            })}\n          </List>\n        </>\n      ) : (\n        <p>No cast data for the movie.</p>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n"],"names":["apiKey","getTrending","page","fetch","then","data","json","getSearchMovie","query","getMovieDetails","id","getMovieCredits","getMovieReviews","List","styled","Item","Attribute","Person","Blank","movieId","useParams","useState","movieCast","setMovieCast","useEffect","credit","cast","map","profile_path","name","character","actor","actorsCollection","length","src","alt"],"sourceRoot":""}