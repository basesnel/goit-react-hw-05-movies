{"version":3,"file":"static/js/828.dd73875d.chunk.js","mappings":"uQAAA,IAAMA,EAAS,mCAGFC,EAAc,SAAAC,GACzB,OAAOC,MAAM,4DAAD,OACkDH,EADlD,iBACiEE,IAC3EE,MAAK,SAAAC,GACL,OAAOA,EAAKC,MACb,GACF,EAEYC,EAAiB,SAAAC,GAC5B,OAAOL,MAAM,qDAAD,OAC2CH,EAD3C,kBAC2DQ,IACrEJ,MAAK,SAAAC,GACL,OAAOA,EAAKC,MACb,GACF,EAEYG,EAAkB,SAAAC,GAC7B,OAAOP,MAAM,sCAAD,OAC4BO,EAD5B,oBAC0CV,IACpDI,MAAK,SAAAC,GACL,OAAOA,EAAKC,MACb,GACF,EAEYK,EAAkB,SAAAD,GAC7B,OAAOP,MAAM,sCAAD,OAC4BO,EAD5B,4BACkDV,IAC5DI,MAAK,SAAAC,GACL,OAAOA,EAAKC,MACb,GACF,EAEYM,EAAkB,SAAAF,GAC7B,OAAOP,MAAM,sCAAD,OAC4BO,EAD5B,4BACkDV,IAC5DI,MAAK,SAAAC,GACL,OAAOA,EAAKC,MACb,GACF,C,2ECtCc,SAASO,EAAT,GAAyD,IAAnCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,QAASC,EAAY,EAAZA,SACzD,OACE,wBACGF,EAAYG,KAAI,SAAAC,GAAK,OACpB,yBACE,UAAC,KAAD,CAAMC,GAAE,UAAKJ,GAAL,OAAeG,EAAMR,IAAMU,MAAO,CAAEC,KAAML,GAAlD,UACGE,EAAMI,MADT,MACmBJ,EAAMK,iBAFlBL,EAAMR,GADK,KAS3B,C,qECbYc,E,OAAYC,GAAAA,IAAH,iF,8ICAP,SAASC,EAAT,GAAuC,IAAjBC,EAAgB,EAAhBA,aACnC,OACE,kBAAMC,SAAUD,EAAhB,WACE,kBACEE,KAAK,OACLC,KAAK,QACLC,aAAa,MACbC,YAAY,sBAEd,yCAGL,CCLD,IA0DA,EA1De,WAAO,IAAD,EAEnB,GAAsCC,EAAAA,EAAAA,UAAS,IAA/C,eAAOnB,EAAP,KAAoBoB,EAApB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEMrB,GAAWsB,EAAAA,EAAAA,MAEX9B,EAAK,UAAG4B,EAAaG,IAAI,gBAApB,QAAgC,IAE3CC,EAAAA,EAAAA,YAAU,WACM,KAAVhC,IAEJD,EAAAA,EAAAA,IAAeC,GACZJ,MAAK,SAAAqC,GACJ,OAAOA,EAAMC,OACd,IACAtC,MAAK,SAAAuC,GAUJ,OATyBA,EAAO1B,KAAI,YAAkC,IAA/BP,EAA8B,EAA9BA,GAAIY,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,aAC1CqB,EAAO,CAAC,EAMd,OAJAA,EAAKlC,GAAKA,EACVkC,EAAKtB,MAAQA,EACbsB,EAAKrB,aAAeA,EAEbqB,CACR,GAEF,IACAxC,MAAK,SAAAyC,GACJX,EAAeW,EAChB,GACJ,GAAE,CAACrC,IAUJ,OACE,UAAC,IAAD,YACE,SAACkB,EAAD,CAAYC,aAVO,SAAAmB,GACrBA,EAAMC,iBAEN,IAAMC,EAAOF,EAAMG,OACnBZ,EAAgB,CAAE7B,MAAOwC,EAAKE,SAAS1C,MAAM2C,QAC7CH,EAAKI,OACN,IAMItC,IACC,0BACE,SAACD,EAAA,EAAD,CACEC,YAAaA,EACbC,QAAQ,GACRC,SAAUA,QAMrB,C","sources":["api/api-service.js","components/MoviesList.jsx","pages/Home.styled.js","components/SearchForm.jsx","pages/Movies.jsx"],"sourcesContent":["const apiKey = '5a20241834eb9a6674dc92f9938aafbf';\n// page = 1;\n\nexport const getTrending = page => {\n  return fetch(\n    `https://api.themoviedb.org/3/trending/movie/week?api_key=${apiKey}&page=${page}`\n  ).then(data => {\n    return data.json();\n  });\n};\n\nexport const getSearchMovie = query => {\n  return fetch(\n    `https://api.themoviedb.org/3/search/movie?api_key=${apiKey}&query=${query}`\n  ).then(data => {\n    return data.json();\n  });\n};\n\nexport const getMovieDetails = id => {\n  return fetch(\n    `https://api.themoviedb.org/3/movie/${id}?api_key=${apiKey}`\n  ).then(data => {\n    return data.json();\n  });\n};\n\nexport const getMovieCredits = id => {\n  return fetch(\n    `https://api.themoviedb.org/3/movie/${id}/credits?api_key=${apiKey}`\n  ).then(data => {\n    return data.json();\n  });\n};\n\nexport const getMovieReviews = id => {\n  return fetch(\n    `https://api.themoviedb.org/3/movie/${id}/reviews?api_key=${apiKey}`\n  ).then(data => {\n    return data.json();\n  });\n};\n","import PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nexport default function MoviesList({ foundMovies, subpath, location }) {\n  return (\n    <ul>\n      {foundMovies.map(movie => (\n        <li key={movie.id}>\n          <Link to={`${subpath}${movie.id}`} state={{ from: location }}>\n            {movie.title} | {movie.vote_average}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nMoviesList.propTypes = {\n  foundMovies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string.isRequired,\n      vote_average: PropTypes.number.isRequired,\n    })\n  ).isRequired,\n  subpath: PropTypes.string.isRequired,\n  location: PropTypes.object.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  max-width: 960px;\n  margin: 0 auto;\n  padding: 16px;\n`;\n","import PropTypes from 'prop-types';\n\nexport default function SearchForm({ handleSubmit }) {\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        type=\"text\"\n        name=\"query\"\n        autoComplete=\"off\"\n        placeholder=\"Search movies...\"\n      />\n      <button>Search</button>\n    </form>\n  );\n}\n\nSearchForm.propTypes = {\n  handleSubmit: PropTypes.func.isRequired,\n};\n","import { useLocation, useSearchParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { getSearchMovie } from '../api/api-service';\nimport { Container } from './Home.styled';\n\n// const findMovies = new MoviesApiService();\nimport MoviesList from 'components/MoviesList';\nimport SearchForm from 'components/SearchForm';\n\nconst Movies = () => {\n  // const [searchQuery, setSearchQuery] = useState('');\n  const [foundMovies, setFoundMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const location = useLocation();\n\n  const query = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    if (query === '') return;\n\n    getSearchMovie(query)\n      .then(found => {\n        return found.results;\n      })\n      .then(movies => {\n        const moviesCollection = movies.map(({ id, title, vote_average }) => {\n          const item = {};\n\n          item.id = id;\n          item.title = title;\n          item.vote_average = vote_average;\n\n          return item;\n        });\n        return moviesCollection;\n      })\n      .then(moviesCollection => {\n        setFoundMovies(moviesCollection);\n      });\n  }, [query]);\n\n  const onHandleSubmit = event => {\n    event.preventDefault();\n\n    const form = event.target;\n    setSearchParams({ query: form.elements.query.value });\n    form.reset();\n  };\n\n  return (\n    <Container>\n      <SearchForm handleSubmit={onHandleSubmit} />\n\n      {foundMovies && (\n        <div>\n          <MoviesList\n            foundMovies={foundMovies}\n            subpath=\"\"\n            location={location}\n          />\n        </div>\n      )}\n    </Container>\n  );\n};\n\nexport default Movies;\n"],"names":["apiKey","getTrending","page","fetch","then","data","json","getSearchMovie","query","getMovieDetails","id","getMovieCredits","getMovieReviews","MoviesList","foundMovies","subpath","location","map","movie","to","state","from","title","vote_average","Container","styled","SearchForm","handleSubmit","onSubmit","type","name","autoComplete","placeholder","useState","setFoundMovies","useSearchParams","searchParams","setSearchParams","useLocation","get","useEffect","found","results","movies","item","moviesCollection","event","preventDefault","form","target","elements","value","reset"],"sourceRoot":""}